function varargout = ParameterSetup(varargin)
% PARAMETERSETUP MATLAB code for ParameterSetup.fig
%      PARAMETERSETUP, by itself, creates a new PARAMETERSETUP or raises the existing
%      singleton*.
%
%      H = PARAMETERSETUP returns the handle to a new PARAMETERSETUP or the handle to
%      the existing singleton*.
%
%      PARAMETERSETUP('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in PARAMETERSETUP.M with the given input arguments.
%
%      PARAMETERSETUP('Property','Value',...) creates a new PARAMETERSETUP or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before ParameterSetup_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to ParameterSetup_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help ParameterSetup

% Last Modified by GUIDE v2.5 24-Mar-2018 10:57:23

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @ParameterSetup_OpeningFcn, ...
                   'gui_OutputFcn',  @ParameterSetup_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


function ParameterSetup_OpeningFcn(hObject, eventdata, handles, varargin)

% Tree GUI for parameter configuration
% 
% sPrm = ParameterSetup(hParent,tree)
% sPrm = ParameterSetup(hParent,tree,'labelerObj',lObj) % do parameter
%   visualization
%
% hParent: not a real parent, just figure over which window is centered
% tree: TreeNode tree, generated by parseConfigYaml()
%
% sPrm: If "Apply" is pushed, parameter structure; otherwise, []

hParent = varargin{1};
tree = varargin{2};
pvargs = varargin(3:end);

labelerObj = myparse(pvargs,...
  'labelerObj',[]);
tfLabelerSupplied = ~isempty(labelerObj);

hFig = handles.figParameterSetup;
centerOnParentFigure(hFig,hParent);

assert(isa(tree,'TreeNode') && isscalar(tree));
% for cosmetic purposes, don't include Dummy/Root node in propertiesGUI
assert(strcmp(tree.Data.Field,'ROOT'));
rootnode = tree;
children = tree.Children;
rootnode.Children = [];
if tfLabelerSupplied
  pvh = ParameterVizHandler(labelerObj,handles.axViz);
  pvh.init();
  propertiesGUI2(handles.pnlParams,children,'parameterVizHandler',pvh);
else
  propertiesGUI2(handles.pnlParams,children);
end
setappdata(hFig,'rootnode',rootnode); % save to glue rootnode back on at output
  
ax = handles.axViz;
ax.XTick = [];
ax.YTick = [];

hObj = HandleObj;
setappdata(hFig,'outputObj',hObj);
%uiwait(hFig);
sPrm = hObj.data;

% Choose default command line output for ParameterSetup
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes ParameterSetup wait for user response (see UIRESUME)
% uiwait(handles.figParameterSetup);

function varargout = ParameterSetup_OutputFcn(hObject, eventdata, handles) 
varargout{1} = handles.output;

function pbApply_Callback(hObject, eventdata, handles)
% AL20180301 iss #105, a cell may be "mid-edit". Force stop editing before
% proceeding
hFig = handles.figParameterSetup;
hgrid = getappdata(hFig,'hgrid');
ce = hgrid.getCellEditor();
if ~isempty(ce)
  ce.stopCellEditing();
  drawnow; % otherwise this method can finish, deleting hFig, before propupdated callback fires
end

t = getappdata(hFig,'mirror');
rootnode = getappdata(hFig,'rootnode');
rootnode.Children = t;
s = rootnode.structize();
hObj = getappdata(hFig,'outputObj');
hObj.data = s;
delete(hFig);

function pbCancel_Callback(hObject, eventdata, handles)
disp('foo');
%delete(handles.figParameterSetup);
